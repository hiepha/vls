package com.vlls.service;

import com.vlls.exception.ServerTechnicalException;
import com.vlls.jpa.dict.envi.EnVi;
import com.vlls.jpa.dict.envi.EnViRepository;
import com.vlls.web.model.DictItemResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

/**
 * Created by hiephn on 2014/10/03.
 */
@Service
public class EnViService extends DictionaryService {

//    private static final Logger LOGGER = LoggerFactory.getLogger(EnViService.class);

    @Autowired
    private EnViRepository enViRepository;

    public List<Map<Integer, String>> getWordList(String key, int size) {
        List<Map<Integer, String>> list = enViRepository.findListWordByWordGreaterThanEqual(key, new PageRequest(0, size));
        return list;
    }

    public List<DictItemResponse> get(Integer id) throws ServerTechnicalException {
        EnVi enVi = enViRepository.findOne(id);
        List<DictItemResponse> itemResponses = this.parseWordContent(enVi.getWord(), enVi.getContent(), enVi.getHasAudio());
        return itemResponses;
    }

//    public static void updateAudio() throws ClassNotFoundException {
//        // load the sqlite-JDBC driver using the current class loader
//        Class.forName("org.sqlite.JDBC");
//
//        Connection connection = null;
//        try
//        {
//            // create a database connection
//            connection = DriverManager.getConnection("jdbc:sqlite:/Users/apple/Documents/_Working/VLS/svn/trunk/Source Code/vlls/vlls-back/dict/en-vi/anh_viet.db");
//
//            LinkedList<File> files = (LinkedList<File>) FileUtils.listFiles(new File("/Users/apple/Sites/vlls-front/src/main/resources/assets/audio/en"), new String[]{"wav"}, false);
//            List<String> fileNames = files.stream().map(file -> substring(file.getName(), 0, indexOf(file.getName(), ".wav"))).collect(Collectors.toList());
//            System.out.println("Total file:" + fileNames.size());
//
//            int i = 1;
//            long hasAudio = 0l;
//            PreparedStatement updateStatement = connection.prepareStatement("update anh_viet set has_audio = 1 where word in
//            int time = 1;
//            System.out.println(">>>>>>>>>>>>>>>>>>>>>>");
//            System.out.println("Processing " + time);
//            for (String fileName : fileNames) {
//                updateStatement.setString(i, fileName);
//                if (i == 500) {
//                    System.out.println("Committing " + time);
//                    hasAudio += updateStatement.executeUpdate();
//                    System.out.println("Total committed " + hasAudio);
//                    i = 1;
//                    ++time;
//                    System.out.println(">>>>>>>>>>>>>>>>>>>>>>");
//                    System.out.println("Processing " + time);
//                    updateStatement = connection.prepareStatement("update anh_viet set has_audio = 1 where word in
//                } else {
//                    ++i;
//                }
//            }
//
//        }
//        catch(SQLException e) {
//            // if the error message is "out of memory",
//            // it probably means no database file is found
//            LOGGER.error(e.getMessage(), e);
//        }
//        finally
//        {
//            try
//            {
//                if(connection != null)
//                    connection.close();
//            }
//            catch(SQLException e)
//            {
//                // connection close failed.
//                LOGGER.error(e.getMessage(), e);
//            }
//        }
//    }
//
//    public static void main(String[] args) throws ClassNotFoundException {
//        updateAudio();
//    }
}
